// default config file for ndnrtc

// basic information:
name = "Ndn-RTC";

// general parameters
general =
{
    log_level = "all";  // all, debug, none, default
    log_file = "ndnrtc.log";
    use_tlv = true; // [true | false] -- determines, whether the library should use TLV encoding
    use_rtx = true; // [true | false] -- reissue timedout interests (late data cases)
    use_fec = true; // [true | false] -- use Forward Error Correction
    use_cache = true; // [true | false] -- use in-memory content cache for producer
    use_avsync = true; // [true | false] -- enable synchronization between audio/video streams
    audio = false;
    video = true;
    skip_incomplete = true; // [true | false] -- indicates, whether incomplete frames should be skipped for playback
    
    prefix = "/test"; // default ndn prefix which will be inserted before app-specific names
    ndnnetwork =
    {
        connect_host = "localhost";
        connect_port = 6363;
    };
};

// defines username and prefix for headless consumer or producer
headless = {
    mode = 0; // [0 - off | 1 - consumer | 2 - producer] -- use headless mode (starts right away in the chosen mode)
    username = "test";
};

// default consumer configuration
consumer = {
    audio = {
        interest_lifetime = 2000;
        jitter_size = 300; // minimal jitter buffer size in milliseconds
        buffer_size = 150; // assembling buffer size
        slot_size = 16000; // frame buffer's slot size (for assembling frames fetched from network)
    };
    
    video = {
        interest_lifetime = 2000;
        jitter_size = 300; // minimal jitter buffer size in milliseconds
        buffer_size = 150; // assembling buffer size
        slot_size = 16000; // frame buffer's slot size (for assembling frames fetched from network)
    };
};

// default producer configuration
producer = {
    // publishing parameters
    // define actual segment size in bytes and freshness period for
    // published data per data type (audio/video)
    audio = {
        segment_size = 500;
        freshness = 1000;
    };
    
    video = {
        segment_size = 1000;
        freshness = 1000;
    };
    
    // capture devices lists
    // these lists enumerate current capture devices installed in the system;
    // they come handy only when system has more than one capturing device per
    // media and devices' IDs are known before starting the app;
    // otherwise, id equals 0 always points to the current default capture
    // device installed in the system
    // for video, id equals -1 defines desktop virtual capture device
    // actual device IDs can be queried from the library - it'll return
    // enumerated list of currently available audio and video capture devices
    
    // list of audio capture devices
    // actual IDs can be queried from the
    acapture = ({
        device_id = 0;
    });
    
    // list of video capture devices and preferrable capturing parameters
    // id equals -1 indicates desktop capturing device
    vcapture = ({
        device_id = 0;
        capture_width = 640;
        capture_height = 480;
        framerate = 30;
    },
    {
        device_id = -1;
        capture_width = 1280;
        capture_height = 768;
        framerate = 30;
    });
    
    // media streams and media threads
    // media stream represents a stream of media packets of a certain media type
    // (audio/video) and associated with certain capture device
    // each media stream can have several media stream threads (or stream
    // threads) which provide specific processing (encoding) of the incoming
    // media data from the capture device
    
    // audio streams that will be established after creating default producer;
    // capture_idx specifies index of the capture device in "acapture" list (above)
    // (above);
    astreams = (
    {
        name = "audio0";
        capture_idx = 0; // index of capturing device from the acapture list
        threads = (
        {
            name = "pcmu";
        } // pcmu
        );
    } // audio0
    ); // astreams
    
    // video streams that will be created after creating default producer;
    // capture_idx specifies index of the capture device in "vcapture" list (above)
    vstreams = (
    {
        name = "video0";
        capture_idx = 0;
        threads = (
        {
            name = "thread1";
            frame_rate = 30; // encoding frame rate
            gop = 30;
            start_bitrate = 200;
            max_bitrate = 0;
            drop_frames = true; // should drop frames to keep up with the bitrate
        }, // thread1
        {
            name = "thread2";
            frame_rate = 30; // encoding frame rate
            gop = 30;
            start_bitrate = 500;
            max_bitrate = 0;
            drop_frames = true; // should drop frames to keep up with the bitrate
        }, // thread2
        {
            name = "thread3";
            frame_rate = 30; // encoding frame rate
            gop = 30;
            start_bitrate = 1000;
            max_bitrate = 0;
            drop_frames = true; // should drop frames to keep up with the bitrate
        } // thread3
        );
    }, // video0
    {
        name = "desktop";
        capture_idx = 1;
        threads = (
        {
            name = "thread1";
            frame_rate = 30; // encoding frame rate
            gop = 30;
            start_bitrate = 500;
            max_bitrate = 0;
            drop_frames = true; // should drop frames to keep up with the bitrate
        }, // thread1
        {
            name = "thread2";
            frame_rate = 30; // encoding frame rate
            gop = 30;
            start_bitrate = 700;
            max_bitrate = 0;
            drop_frames = true; // should drop frames to keep up with the bitrate
        }, // thread2
        {
            name = "thread3";
            frame_rate = 30; // encoding frame rate
            gop = 30;
            start_bitrate = 1000;
            max_bitrate = 0;
            drop_frames = true; // should drop frames to keep up with the bitrate
        } // thread3
        );
    } // desktop_sharing
    ); // vstreams
}