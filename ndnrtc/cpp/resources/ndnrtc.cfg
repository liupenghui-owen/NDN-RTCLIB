// default config file for ndnrtc

// basic information:
name = "Ndn-RTC";

// general parameters
general =
{
    log_level = "all";  // all, debug, none, default
    log_file = "ndnrtc.log"; 
    use_tlv = true; // [true | false] -- determines, whether the library should use TLV encoding
    use_rtx = true; // [true | false] -- reissue timedout interests (late data cases)
    use_fec = true; // [true | false] -- use Forward Error Correction
    use_cache = true; // [true | false] -- use in-memory content cache for producer
    use_avsync = true; // [true | false] -- enable synchronization between audio/video streams
    headless_mode = 0; // [0 - off | 1 - consumer | 2 - producer] -- use headless mode (starts right away in the chosen mode)
    headless_user = "test";
    audio = true;
    video = true;
};

// camera capturing parameters
capture =
{
    device_id = 0;          // first default camera in the list
    capture_width = 1280; //1280; // 320;
    capture_height = 720; //720; // 240;
    fps = 30;               // capture framerate
    gop = 30;
};

// video streams
vstreams = ( {
                frame_rate = 30; // encoding frame rate
                gop = 30;
                start_bitrate = 900;
                max_bitrate = 0;
                drop_frames = true; // should drop frames to keep up with the bitrate
            });

// ndn network parameters
ndnnetwork =
{
    connect_host = "localhost";
    connect_port = 6363;
    ndn_prefix = "ndn/edu/ucla/remap";
};

// video publishing parameters
videopublish =
{
    segment_size = 1000;
    freshness = 1;
};

// video fetching parameters
videofetch =
{
    skip_incomplete = true; // [true | false] -- indicates, whether incomplete frames should be skipped for playback
    playback_rate = 30; // rate at which consumer plays back producer's stream
    interest_timeout = 2000;
    jitter_size = 600; // minimal jitter buffer size in milliseconds
    buffer_size = 150; // assembling buffer size
    slot_size = 16000; // frame buffer's slot size (for assembling frames fetched from network)
};

// audio publishing parameters
audiopublish =
{
    segment_size = 600;
    freshness = 1;
};

// audio streams
astreams = ( {
    start_bitrate = 90;
});

// audio fetching parameters
audiofetch =
{
    interest_timeout = 2000; // default interest lifetime in milliseconds
    jitter_size = 600; // minimal jitter buffer size in milliseconds
    buffer_size = 150; // assembling buffer size
    slot_size = 600; // frame buffer's slot size (for assembling frames fetched from network)
};
